/////// matlab.cpp
    // findpeaks in vector<double> segment, with minPeakDistance and threhold arg, return 2 vectors: max_peak_strengths, max_peak_locs
    // complexity: O(n^2), n = number of peaks
    void findpeaks(const vector<double> &segment, double minPeakDistance, double threshold,
                   vector<double> &max_peak_strengths, vector<int> &max_peak_locs);
    test_in [100 elements] =   1.0000    1.3090    1.5878    1.8090    1.9511    2.0000    1.9511    1.8090    1.5878    1.3090    1.0000    0.6910    0.4122    0.1910    0.0489         0    0.0489    0.1910    0.4122    0.6910    1.0000    1.3090    1.5878    1.8090    1.9511    2.0000    1.9511    1.8090    1.5878    1.3090    1.0000    0.6910    0.4122    0.1910    0.0489         0    0.0489    0.1910    0.4122    0.6910    1.0000    1.3090    1.5878    1.8090    1.9511    2.0000    1.9511    1.8090    1.5878    1.3090    1.0000    0.6910    0.4122    0.1910    0.0489         0    0.0489    0.1910    0.4122    0.6910    1.0000    1.3090    1.5878    1.8090    1.9511    2.0000    1.9511    1.8090    1.5878    1.3090    1.0000    0.6910    0.4122    0.1910    0.0489         0    0.0489    0.1910    0.4122    0.6910    1.0000    1.3090    1.5878    1.8090    1.9511    2.0000    1.9511    1.8090    1.5878    1.3090    1.0000    0.6910    0.4122    0.1910    0.0489         0    0.0489    0.1910    0.4122    0.6910
    test_out.peak_strength = 2	2	2	2	2
    test_out.peak_loc = 6	26	46	66	86
    
    
    
    // unique_stable with vector<pair<double,int>>
    vector<pair<double,int>> unique_stable(const vector<pair<double,int>> &arr);
    
    test_in =
     1     2
     1     2
     1     2
     2     3
     3     4
     3     4
     5     7
    
    test_out =
     1     2
     2     3
     3     4
     5     7
    
    // conv(seg1, seg2, 'same')
    vector<double> corr_linear(vector<double> signal, vector<double> kernel, bool subtractMean);
	
	test_in1 [50 elements] =    0.2760    0.6797    0.6551    0.1626    0.1190    0.4984    0.9597    0.3404    0.5853    0.2238    0.7513    0.2551    0.5060    0.6991    0.8909    0.9593    0.5472    0.1386    0.1493    0.2575    0.8407    0.2543    0.8143    0.2435    0.9293    0.3500    0.1966    0.2511    0.6160    0.4733    0.3517    0.8308    0.5853    0.5497    0.9172    0.2858    0.7572    0.7537    0.3804    0.5678    0.0759    0.0540    0.5308    0.7792    0.9340    0.1299    0.5688    0.4694    0.0119    0.3371
	test_in2 [10 elements[ = 	0.1622    0.7943    0.3112    0.5285    0.1656    0.6020    0.2630    0.6541    0.6892    0.7482
	test_out [50 elements] =	0.5146 	  0.3169    0.4857    0.5599    0.5143    0.3088    0.3628    0.6672    0.3186    0.6456    0.2155    0.6683    0    	  0.5464    0.2979    0.6462    0.3488    0.5088    0.2908    0.3497    0.2250    0.7814    0.4623    1.0023    0.1701    0.7383    0.0030    0.5693    0.1049    0.7666    0.3965    0.4810    0.5407    0.4980    0.1985    0.4089    0.2183    0.4102    0.3734    0.4948    0.5421    0.5402    0.4466    0.4395    0.5738    0.8280    0.3317    0.4861    0.3132    0.2712    
	
	
	
    // [counts, centres] = hist(arr, nbins)
    void hist(const vector<double> &arr, int nbins, vector<int> &counts, vector<double> &centers);
	nbins = 5
	test_in [50 elements] =    0.2760    0.6797    0.6551    0.1626    0.1190    0.4984    0.9597    0.3404    0.5853    0.2238    0.7513    0.2551    0.5060    0.6991    0.8909    0.9593    0.5472    0.1386    0.1493    0.2575    0.8407    0.2543    0.8143    0.2435    0.9293    0.3500    0.1966    0.2511    0.6160    0.4733    0.3517    0.8308    0.5853    0.5497    0.9172    0.2858    0.7572    0.7537    0.3804    0.5678    0.0759    0.0540    0.5308    0.7792    0.9340    0.1299    0.5688    0.4694    0.0119    0.3371
	test_out.counts = 9    13     9     9    10
	test_out.centres = 0.1067    0.2963    0.4858    0.6754    0.8650

    // invprctile
    double invprctile(const vector<double> &arr, double x);
	
	test_in1 [50 elements] =    0.2760    0.6797    0.6551    0.1626    0.1190    0.4984    0.9597    0.3404    0.5853    0.2238    0.7513    0.2551    0.5060    0.6991    0.8909    0.9593    0.5472    0.1386    0.1493    0.2575    0.8407    0.2543    0.8143    0.2435    0.9293    0.3500    0.1966    0.2511    0.6160    0.4733    0.3517    0.8308    0.5853    0.5497    0.9172    0.2858    0.7572    0.7537    0.3804    0.5678    0.0759    0.0540    0.5308    0.7792    0.9340    0.1299    0.5688    0.4694    0.0119    0.3371
	test_in2 = [-1	0	0.4505	1	2]
	test_out = [0	0	44.5762	100	100]
	
    //prctile
    double prctile(vector<double> arr, double percent);
    test_in1 [50 elements] =    0.2760    0.6797    0.6551    0.1626    0.1190    0.4984    0.9597    0.3404    0.5853    0.2238    0.7513    0.2551    0.5060    0.6991    0.8909    0.9593    0.5472    0.1386    0.1493    0.2575    0.8407    0.2543    0.8143    0.2435    0.9293    0.3500    0.1966    0.2511    0.6160    0.4733    0.3517    0.8308    0.5853    0.5497    0.9172    0.2858    0.7572    0.7537    0.3804    0.5678    0.0759    0.0540    0.5308    0.7792    0.9340    0.1299    0.5688    0.4694    0.0119    0.3371
	test_in2 = 30
	test_out = 0.2668

    //filter function for frames2signal function
    vector<double> low_pass_filter(vector<double> arr);
    test_in [50 elements] =    0.2760    0.6797    0.6551    0.1626    0.1190    0.4984    0.9597    0.3404    0.5853    0.2238    0.7513    0.2551    0.5060    0.6991    0.8909    0.9593    0.5472    0.1386    0.1493    0.2575    0.8407    0.2543    0.8143    0.2435    0.9293    0.3500    0.1966    0.2511    0.6160    0.4733    0.3517    0.8308    0.5853    0.5497    0.9172    0.2858    0.7572    0.7537    0.3804    0.5678    0.0759    0.0540    0.5308    0.7792    0.9340    0.1299    0.5688    0.4694    0.0119    0.3371
	test_out [43 elements] = 0.2476    0.3124    0.3823    0.4230    0.4660    0.4845    0.4839    0.4712    0.4698    0.5049    0.5572    0.5861    0.5961    0.5868    0.6009    0.5633    0.5426    0.4847    0.4703    0.4536    0.4518    0.4530    0.4717    0.4962    0.4863    0.4661    0.4480    0.4308    0.4681    0.4816    0.5227    0.5602    0.6097    0.6429    0.6475    0.6139    0.5684    0.5090    0.4752    0.4522    0.4383    0.4485    0.4658