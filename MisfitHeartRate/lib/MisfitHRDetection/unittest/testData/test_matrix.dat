/////// matrix.cpp
    // return a vector of integer from a to b with specific step
	vector<int> vectorRange(int a, int b, int step = 1);
    test_in1 = 4
    test_in2 = 11
    test_out = 	4	5	6	7	8	9	10	11
    
    // atan2 of 2 Mats which have same size
	// default intput/output type is double - CV_64F
	Mat atan2Mat(const Mat &src1, const Mat &src2);
	
	test_in1 [10*10] =	
   -0.1556   -0.0919   -1.2270    1.0780   -1.5220    0.5493    1.8045    1.2679   -1.3075   -1.1611
    0.1291   -0.9212   -0.3272    0.3082    0.6210    0.4676   -0.6321    1.0905    0.7941   -0.3975
    0.5094   -0.9270    0.8916    0.2996   -1.5075    0.1915    1.3165   -0.9465   -0.1973    0.2543
   -0.0301   -0.9612    0.2882   -0.1972   -1.6794   -0.2298    1.5516   -0.4385    0.6492    1.2078
   -0.4574    1.7848    2.2652   -0.1464    0.7890   -0.5792   -1.4689    0.3432   -0.8315   -1.0335
    0.5963   -0.2002   -0.0479   -0.1031   -0.6543    0.4805    0.1769   -0.0584    0.8960    1.2951
   -0.1135    0.9404   -1.5519   -2.7990    1.2449   -0.3868    3.4663    2.5350   -1.8135    2.7681
    0.8070    0.3492    0.4441    0.3933   -1.2923    0.4216   -0.2146    0.4386    1.5667   -0.4953
   -0.0898    1.8593   -0.9118    0.9902   -0.6144    1.0877    0.4863    0.4375    0.8465    0.4688
   -0.0063    0.9271    0.0494   -1.2976    0.2417   -2.2493    0.3309   -0.8377    0.1102   -0.6573
   
   
   	test_in2 [10*10] =
   -1.7170   -0.5766   -0.7644    1.9512   -0.5540    1.4685   -0.1152   -0.2593   -1.2004   -0.0817
    1.4705   -0.8460    0.4101   -0.9047   -0.9437    0.0329    1.8220   -1.2135    0.1661   -0.1585
    0.6941   -1.8172   -0.7899   -0.6822   -0.0598    1.6925   -2.0215    1.6245    0.7762    0.0065
   -0.5107   -0.5217    0.1616    2.0183   -0.5747    0.4757   -0.6370    0.3735   -1.3814   -1.0646
    0.1134    0.1614    1.9779    0.4543    1.4419    0.3685   -0.1888   -0.2509    1.1283   -1.6439
   -0.2298   -1.0618    0.7953   -0.0421    0.2355    2.1920    0.1483   -0.9255    2.4654    1.5815
   -1.4617    0.4505    1.0374    0.4582    1.0214    1.5357   -1.7839    0.0987   -1.5579    0.2926
   -2.8823   -0.2728    2.3603   -0.2641   -0.1398    0.9073    0.5291    1.6843   -2.0666   -1.1876
   -0.0475   -0.1015    1.1754   -0.2920   -0.0816    0.4023    0.7297    0.2753   -0.0726    1.0759
   -0.4625   -1.4291    0.3977   -0.3868    1.2582   -0.5384   -0.9401    0.3533    0.7591   -1.2974
   
   
   	test_out [10*10] =
   -3.0512   -2.9836   -2.1280    0.5048   -1.9199    0.3580    1.6346    1.7725   -2.3135   -1.6410
    0.0876   -2.3136   -0.6734    2.8133    2.5596    1.5005   -0.3339    2.4095    1.3646   -1.9501
    0.6331   -2.6699    2.2958    2.7277   -1.6105    0.1126    2.5644   -0.5275   -0.2489    1.5452
   -3.0827   -2.0681    1.0596   -0.0974   -1.9005   -0.4500    1.9603   -0.8653    2.7023    2.2933
   -1.3278    1.4806    0.8530   -0.3118    0.5007   -1.0041   -1.6986    2.2020   -0.6351   -2.5803
    1.9386   -2.9552   -0.0601   -1.9586   -1.2253    0.2158    0.8733   -3.0786    0.3486    0.6862
   -3.0641    1.1241   -0.9815   -1.4085    0.8837   -0.2468    2.0461    1.5319   -2.2805    1.4655
    2.8686    2.2340    0.1860    2.1622   -1.6786    0.4350   -0.3854    0.2548    2.4929   -2.7464
   -2.0570    1.6253   -0.6598    1.8575   -1.7028    1.2166    0.5878    1.0092    1.6564    0.4109
   -3.1280    2.5661    0.1237   -1.8605    0.1898   -1.8057    2.8032   -1.1717    0.1441   -2.6726
	
	// return src.^n
	// default intput/output type is double - CV_64F
	Mat powMat(const Mat &src, double n);
	
	test_in1 =
    0.8147    0.1576    0.6557    0.7060    0.4387    0.2760    0.7513    0.8407    0.3517    0.0759
    0.9058    0.9706    0.0357    0.0318    0.3816    0.6797    0.2551    0.2543    0.8308    0.0540
    0.1270    0.9572    0.8491    0.2769    0.7655    0.6551    0.5060    0.8143    0.5853    0.5308
    0.9134    0.4854    0.9340    0.0462    0.7952    0.1626    0.6991    0.2435    0.5497    0.7792
    0.6324    0.8003    0.6787    0.0971    0.1869    0.1190    0.8909    0.9293    0.9172    0.9340
    0.0975    0.1419    0.7577    0.8235    0.4898    0.4984    0.9593    0.3500    0.2858    0.1299
    0.2785    0.4218    0.7431    0.6948    0.4456    0.9597    0.5472    0.1966    0.7572    0.5688
    0.5469    0.9157    0.3922    0.3171    0.6463    0.3404    0.1386    0.2511    0.7537    0.4694
    0.9575    0.7922    0.6555    0.9502    0.7094    0.5853    0.1493    0.6160    0.3804    0.0119
    0.9649    0.9595    0.1712    0.0344    0.7547    0.2238    0.2575    0.4733    0.5678    0.3371
   
   
   	test_in2 = 1.56
   	
   	
   	test_out [10*10] =
    0.7264    0.0560    0.5177    0.5810    0.2766    0.1342    0.6401    0.7629    0.1959    0.0179
    0.8570    0.9545    0.0055    0.0046    0.2225    0.5475    0.1187    0.1181    0.7489    0.0105
    0.0400    0.9340    0.7748    0.1349    0.6591    0.5169    0.3455    0.7258    0.4336    0.3723
    0.8682    0.3238    0.8990    0.0082    0.6994    0.0588    0.5721    0.1104    0.3932    0.6776
    0.4892    0.7064    0.5463    0.0263    0.0730    0.0361    0.8351    0.8919    0.8739    0.8990
    0.0265    0.0475    0.6487    0.7386    0.3284    0.3374    0.9372    0.1944    0.1418    0.0414
    0.1361    0.2601    0.6293    0.5667    0.2834    0.9379    0.3904    0.0791    0.6480    0.4147
    0.3900    0.8717    0.2322    0.1667    0.5062    0.1862    0.0458    0.1158    0.6434    0.3073
    0.9345    0.6953    0.5174    0.9234    0.5853    0.4336    0.0515    0.4697    0.2214    0.0010
    0.9458    0.9375    0.0637    0.0052    0.6446    0.0968    0.1205    0.3113    0.4136    0.1834

	
	// return a + b
	Mat add(const Mat &a, const Mat &b);
	test_in1 [10*10] =	
   -0.1556   -0.0919   -1.2270    1.0780   -1.5220    0.5493    1.8045    1.2679   -1.3075   -1.1611
    0.1291   -0.9212   -0.3272    0.3082    0.6210    0.4676   -0.6321    1.0905    0.7941   -0.3975
    0.5094   -0.9270    0.8916    0.2996   -1.5075    0.1915    1.3165   -0.9465   -0.1973    0.2543
   -0.0301   -0.9612    0.2882   -0.1972   -1.6794   -0.2298    1.5516   -0.4385    0.6492    1.2078
   -0.4574    1.7848    2.2652   -0.1464    0.7890   -0.5792   -1.4689    0.3432   -0.8315   -1.0335
    0.5963   -0.2002   -0.0479   -0.1031   -0.6543    0.4805    0.1769   -0.0584    0.8960    1.2951
   -0.1135    0.9404   -1.5519   -2.7990    1.2449   -0.3868    3.4663    2.5350   -1.8135    2.7681
    0.8070    0.3492    0.4441    0.3933   -1.2923    0.4216   -0.2146    0.4386    1.5667   -0.4953
   -0.0898    1.8593   -0.9118    0.9902   -0.6144    1.0877    0.4863    0.4375    0.8465    0.4688
   -0.0063    0.9271    0.0494   -1.2976    0.2417   -2.2493    0.3309   -0.8377    0.1102   -0.6573
   
   
   	test_in2 [10*10] =
   -1.7170   -0.5766   -0.7644    1.9512   -0.5540    1.4685   -0.1152   -0.2593   -1.2004   -0.0817
    1.4705   -0.8460    0.4101   -0.9047   -0.9437    0.0329    1.8220   -1.2135    0.1661   -0.1585
    0.6941   -1.8172   -0.7899   -0.6822   -0.0598    1.6925   -2.0215    1.6245    0.7762    0.0065
   -0.5107   -0.5217    0.1616    2.0183   -0.5747    0.4757   -0.6370    0.3735   -1.3814   -1.0646
    0.1134    0.1614    1.9779    0.4543    1.4419    0.3685   -0.1888   -0.2509    1.1283   -1.6439
   -0.2298   -1.0618    0.7953   -0.0421    0.2355    2.1920    0.1483   -0.9255    2.4654    1.5815
   -1.4617    0.4505    1.0374    0.4582    1.0214    1.5357   -1.7839    0.0987   -1.5579    0.2926
   -2.8823   -0.2728    2.3603   -0.2641   -0.1398    0.9073    0.5291    1.6843   -2.0666   -1.1876
   -0.0475   -0.1015    1.1754   -0.2920   -0.0816    0.4023    0.7297    0.2753   -0.0726    1.0759
   -0.4625   -1.4291    0.3977   -0.3868    1.2582   -0.5384   -0.9401    0.3533    0.7591   -1.2974
   
   test_out [10*10] =
	-1.8725   -0.6685   -1.9914    3.0293   -2.0760    2.0179    1.6893    1.0086   -2.5079   -1.2428
    1.5997   -1.7672    0.0829   -0.5965   -0.3227    0.5006    1.1899   -0.1230    0.9603   -0.5560
    1.2036   -2.7442    0.1017   -0.3825   -1.5674    1.8839   -0.7050    0.6781    0.5789    0.2608
   -0.5408   -1.4830    0.4498    1.8211   -2.2541    0.2459    0.9146   -0.0650   -0.7323    0.1432
   -0.3440    1.9463    4.2431    0.3079    2.2308   -0.2107   -1.6577    0.0923    0.2968   -2.6775
    0.3665   -1.2620    0.7474   -0.1452   -0.4188    2.6725    0.3252   -0.9839    3.3614    2.8767
   -1.5753    1.3909   -0.5145   -2.3408    2.2663    1.1489    1.6824    2.6336   -3.3714    3.0607
   -2.0753    0.0764    2.8044    0.1291   -1.4321    1.3289    0.3144    2.1229   -0.5000   -1.6830
   -0.1373    1.7578    0.2636    0.6983   -0.6959    1.4900    1.2160    0.7128    0.7739    1.5447
   -0.4688   -0.5020    0.4472   -1.6844    1.4999   -2.7877   -0.6092   -0.4844    0.8693   -1.9547

	
	// return a .* b
	Mat multiply(const Mat &a, const Mat &b);
	test_in1 [10*10] =	
   -0.1556   -0.0919   -1.2270    1.0780   -1.5220    0.5493    1.8045    1.2679   -1.3075   -1.1611
    0.1291   -0.9212   -0.3272    0.3082    0.6210    0.4676   -0.6321    1.0905    0.7941   -0.3975
    0.5094   -0.9270    0.8916    0.2996   -1.5075    0.1915    1.3165   -0.9465   -0.1973    0.2543
   -0.0301   -0.9612    0.2882   -0.1972   -1.6794   -0.2298    1.5516   -0.4385    0.6492    1.2078
   -0.4574    1.7848    2.2652   -0.1464    0.7890   -0.5792   -1.4689    0.3432   -0.8315   -1.0335
    0.5963   -0.2002   -0.0479   -0.1031   -0.6543    0.4805    0.1769   -0.0584    0.8960    1.2951
   -0.1135    0.9404   -1.5519   -2.7990    1.2449   -0.3868    3.4663    2.5350   -1.8135    2.7681
    0.8070    0.3492    0.4441    0.3933   -1.2923    0.4216   -0.2146    0.4386    1.5667   -0.4953
   -0.0898    1.8593   -0.9118    0.9902   -0.6144    1.0877    0.4863    0.4375    0.8465    0.4688
   -0.0063    0.9271    0.0494   -1.2976    0.2417   -2.2493    0.3309   -0.8377    0.1102   -0.6573
   
   
   	test_in2 [10*10] =
   -1.7170   -0.5766   -0.7644    1.9512   -0.5540    1.4685   -0.1152   -0.2593   -1.2004   -0.0817
    1.4705   -0.8460    0.4101   -0.9047   -0.9437    0.0329    1.8220   -1.2135    0.1661   -0.1585
    0.6941   -1.8172   -0.7899   -0.6822   -0.0598    1.6925   -2.0215    1.6245    0.7762    0.0065
   -0.5107   -0.5217    0.1616    2.0183   -0.5747    0.4757   -0.6370    0.3735   -1.3814   -1.0646
    0.1134    0.1614    1.9779    0.4543    1.4419    0.3685   -0.1888   -0.2509    1.1283   -1.6439
   -0.2298   -1.0618    0.7953   -0.0421    0.2355    2.1920    0.1483   -0.9255    2.4654    1.5815
   -1.4617    0.4505    1.0374    0.4582    1.0214    1.5357   -1.7839    0.0987   -1.5579    0.2926
   -2.8823   -0.2728    2.3603   -0.2641   -0.1398    0.9073    0.5291    1.6843   -2.0666   -1.1876
   -0.0475   -0.1015    1.1754   -0.2920   -0.0816    0.4023    0.7297    0.2753   -0.0726    1.0759
   -0.4625   -1.4291    0.3977   -0.3868    1.2582   -0.5384   -0.9401    0.3533    0.7591   -1.2974
	
	test_out [10*10] =
	0.2671    0.0530    0.9379    2.1035    0.8432    0.8067   -0.2079   -0.3288    1.5695    0.0948
    0.1899    0.7793   -0.1342   -0.2788   -0.5861    0.0154   -1.1516   -1.3234    0.1319    0.0630
    0.3536    1.6845   -0.7043   -0.2044    0.0902    0.3240   -2.6612   -1.5376   -0.1531    0.0017
    0.0154    0.5015    0.0466   -0.3980    0.9651   -0.1093   -0.9883   -0.1638   -0.8968   -1.2858
   -0.0519    0.2881    4.4803   -0.0665    1.1376   -0.2135    0.2773   -0.0861   -0.9381    1.6991
   -0.1370    0.2126   -0.0381    0.0043   -0.1541    1.0532    0.0262    0.0540    2.2089    2.0483
    0.1659    0.4236   -1.6099   -1.2824    1.2715   -0.5941   -6.1834    0.2501    2.8253    0.8100
   -2.3261   -0.0952    1.0482   -0.1039    0.1807    0.3825   -0.1136    0.7388   -3.2378    0.5883
    0.0043   -0.1886   -1.0717   -0.2891    0.0501    0.4375    0.3549    0.1204   -0.0615    0.5044
    0.0029   -1.3249    0.0197    0.5019    0.3041    1.2110   -0.3111   -0.2959    0.0836    0.8528
	
	
	
	// return mat .* x
	Mat multiply(const Mat &a, double x);
	
	test_in1 [10*10] =	
   -0.1556   -0.0919   -1.2270    1.0780   -1.5220    0.5493    1.8045    1.2679   -1.3075   -1.1611
    0.1291   -0.9212   -0.3272    0.3082    0.6210    0.4676   -0.6321    1.0905    0.7941   -0.3975
    0.5094   -0.9270    0.8916    0.2996   -1.5075    0.1915    1.3165   -0.9465   -0.1973    0.2543
   -0.0301   -0.9612    0.2882   -0.1972   -1.6794   -0.2298    1.5516   -0.4385    0.6492    1.2078
   -0.4574    1.7848    2.2652   -0.1464    0.7890   -0.5792   -1.4689    0.3432   -0.8315   -1.0335
    0.5963   -0.2002   -0.0479   -0.1031   -0.6543    0.4805    0.1769   -0.0584    0.8960    1.2951
   -0.1135    0.9404   -1.5519   -2.7990    1.2449   -0.3868    3.4663    2.5350   -1.8135    2.7681
    0.8070    0.3492    0.4441    0.3933   -1.2923    0.4216   -0.2146    0.4386    1.5667   -0.4953
   -0.0898    1.8593   -0.9118    0.9902   -0.6144    1.0877    0.4863    0.4375    0.8465    0.4688
   -0.0063    0.9271    0.0494   -1.2976    0.2417   -2.2493    0.3309   -0.8377    0.1102   -0.6573
   
   
   	test_in = 1.56
	
	
	test_out [10*10] =
   -0.2427   -0.1433   -1.9141    1.6818   -2.3743    0.8570    2.8150    1.9779   -2.0397   -1.8113
    0.2015   -1.4371   -0.5105    0.4808    0.9688    0.7295   -0.9860    1.7012    1.2389   -0.6202
    0.7947   -1.4460    1.3910    0.4674   -2.3517    0.2987    2.0537   -1.4765   -0.3077    0.3967
   -0.0470   -1.4995    0.4496   -0.3077   -2.6199   -0.3585    2.4205   -0.6841    1.0127    1.8842
   -0.7135    2.7843    3.5337   -0.2284    1.2308   -0.9036   -2.2915    0.5354   -1.2971   -1.6123
    0.9303   -0.3123   -0.0747   -0.1608   -1.0207    0.7496    0.2760   -0.0911    1.3977    2.0204
   -0.1771    1.4670   -2.4209   -4.3664    1.9420   -0.6035    5.4074    3.9546   -2.8290    4.3183
    1.2590    0.5447    0.6928    0.6135   -2.0159    0.6577   -0.3348    0.6843    2.4440   -0.7727
   -0.1401    2.9005   -1.4224    1.5448   -0.9584    1.6968    0.7586    0.6825    1.3205    0.7313
   -0.0098    1.4462    0.0771   -2.0243    0.3770   -3.5090    0.5162   -1.3068    0.1718   -1.0254