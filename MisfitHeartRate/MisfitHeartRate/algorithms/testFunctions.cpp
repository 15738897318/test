//
//  testFunctions.cpp
//  MisfitHeartRate
//
//  Created by Bao Nguyen on 7/15/14.
//  Copyright (c) 2014 misfit. All rights reserved.
//

#include "testFunctions.h"


namespace MHR {
    void testMathFunctions()
    {
//        int sizeArr[] = {30, 40, 100};
//        Mat img = Mat(3, sizeArr, CV_64F, CvScalar(0));
//        double v = 0, delta = 1;
//        for(int i=0; i<100; ++i){
//            if(v==10){
//                delta=-1;
//            }else if(v==-10){
//                delta=1;
//            }
//            v+=delta;
//            for(int x=0; x<30; ++x) for(int y=0; y<40; ++y) img.at<double>(x,y,i)=v;
//        }
//        Mat debugImg;
//        vector<double> ans = frames2signal(img, "mode-balance", 30, 0, debugImg);
//        for(int i=0; i<(int) ans.size(); ++i) cout<<ans[i]<<' '; cout<<endl;


//        vector<double> arr;
//        for(int i=0; i<100; ++i){
//        arr.push_back(1.0*(rand()%10000)/(rand()%100));
//        }
//        cout<<"[";
//        for(int i=0; i<100-1;++i) cout<<arr[i]<<", "; cout<<arr[99]<<"]"<<endl;
//        arr=low_pass_filter(arr);
//        cout<<"[";
//        for(int i=0; i<100-1;++i) cout<<arr[i]<<", "; cout<<arr[99]<<"]"<<endl;


//        vector<double>seg1{1, 7, 3, 89, 5, 16, 5};
//        vector<double> seg2{0.1, 1.38, 0.76};
//        vector<double> ans = conv(seg1,seg2);
//        cout<<(int)ans.size()<<endl;
//        for(int i=0; i<(int)ans.size(); ++i) cout<<ans[i]<<' '; cout<<endl;


//        vector<double> arr;
//        srand(time(NULL));
//        for(int i=1; i<=100; ++i) arr.push_back(i);
//        for(int i=1; i<=100; ++i){
//        double per=(rand()%10001)/100.0;
//        cout<<i<<' '<<per<<' '<<prctile(arr, per)<<' '<<invprctile(arr, prctile(arr,per))<<endl;
//        }


//        invprctile checking
//        vector<double> arr {5,1,3,2.2,3.1,5.6,10};
//        cout<<invprctile(arr, 10)<<endl;
//        cout<<invprctile(arr, 0)<<endl;
//        cout<<invprctile(arr, 1)<<endl;


//        srand(time(NULL));
//        vector<double> data {0,2,9,2,5,8,7,3,1,9,4,3,5,8,10,0,1,2,9,5,10};
//        vector<int> counts;
//        vector<double> centers;
//        hist(data, 10, counts, centers);
//        cout<<counts.size()<<endl;
//        for(int i=0; i<(int) counts.size(); ++i) cout<<centers[i]<<' '<<counts[i]<<endl;


//        vector<double> segment;
//        for(double x=0; x<=100; x+=0.01)
//            segment.push_back(sin(x*acos(-1)));
//        printf("input: \n");
//        for (int i = 0; i < (int)segment.size(); ++i)
//            printf("%lf\n", segment[i]);
//
//        vector<double> strengths;
//        vector<int> locs;
//        findpeaks(segment, 300, 0, strengths, locs);
//        printf("%d\n",(int)strengths.size());
//
//        for(int i=0; i<strengths.size(); ++i)
//            printf("%lf %d\n",strengths[i], locs[i]);
    }
    
    
    void test_hr_cal_autocorr()
    {
        vector<double> input;
        for(double x=0; x<=100; x+=0.01)
            input.push_back(sin(x*acos(-1)));
        
        int length = (int)input.size();
        printf("input.size() = %d\n", length);
//        for (int i = 0; i < length; ++i)
//            printf("%lf, ", input[i]);
//        printf("\n\n");

        vector<double> strengths;
        vector<int> locs;
        findpeaks(input, 0, 0, strengths, locs);
        printf("strengths.size() = %d\n",(int)strengths.size());

        hrDebug debug;
        printf("hr_calc_autocorr = %lf\n", hr_calc_autocorr(input, 30.0, 0, 100, 0.0, 0.0, debug));
        printf("debug.heartBeats.size() = %d\n", (int)debug.heartBeats.size());
        printf("debug.heartRates.size() = %d\n", (int)debug.heartRates.size());
        printf("debug.autocorrelation.size() = %d\n", (int)debug.autocorrelation.size());
        
        printf("\n\nautocorrelation:\n");
        for (int i = 0; i < (int)debug.autocorrelation.size(); ++i)
            printf("%lf, ", debug.autocorrelation[i]);
        printf("\n\n");
    }
    
    
    void test_hr_calc_pda() {
        vector<double> input;
        for(double x=0; x<=100; x+=0.01)
            input.push_back(sin(x*acos(-1)));
        int length = (int)input.size();
        printf("input.size() = %d\n", length);
//        for (int i = 0; i < length; ++i)
//            printf("%lf, ", input[i]);
//        printf("\n\n");
        
        vector<double> strengths;
        vector<int> locs;
        findpeaks(input, 0, 0, strengths, locs);
        printf("strengths.size() = %d\n",(int)strengths.size());
        
        hrDebug debug;
        printf("hr_calc_pda = %lf\n", hr_calc_pda(input, 30.0, 0, 120, 0.0, 0.0, 0.0, debug));
        printf("debug.heartBeats.size() = %d\n", (int)debug.heartBeats.size());
        printf("debug.heartRates.size() = %d\n", (int)debug.heartRates.size());
        printf("debug.autocorrelation.size() = %d\n", (int)debug.autocorrelation.size());
//        printf("\n\nautocorrelation:\n");
//        for (int i = 0; i < (int)debug.autocorrelation.size(); ++i)
//            printf("%lf, ", debug.autocorrelation[i]);
//        printf("\n\n");
    }
    
    
//    void test_rgb2ntsc() {
//        int nRow = 10, nCol = 10;
//        double test_array_0[] = {
//            0.8147, 0.1576, 0.6557, 0.7060, 0.4387, 0.2760, 0.7513, 0.8407, 0.3517, 0.0759,
//            0.9058, 0.9706, 0.0357, 0.0318, 0.3816, 0.6797, 0.2551, 0.2543, 0.8308, 0.0540,
//            0.1270, 0.9572, 0.8491, 0.2769, 0.7655, 0.6551, 0.5060, 0.8143, 0.5853, 0.5308,
//            0.9134, 0.4854, 0.9340, 0.0462, 0.7952, 0.1626, 0.6991, 0.2435, 0.5497, 0.7792,
//            0.6324, 0.8003, 0.6787, 0.0971, 0.1869, 0.1190, 0.8909, 0.9293, 0.9172, 0.9340,
//            0.0975, 0.1419, 0.7577, 0.8235, 0.4898, 0.4984, 0.9593, 0.3500, 0.2858, 0.1299,
//            0.2785, 0.4218, 0.7431, 0.6948, 0.4456, 0.9597, 0.5472, 0.1966, 0.7572, 0.5688,
//            0.5469, 0.9157, 0.3922, 0.3171, 0.6463, 0.3404, 0.1386, 0.2511, 0.7537, 0.4694,
//            0.9575, 0.7922, 0.6555, 0.9502, 0.7094, 0.5853, 0.1493, 0.6160, 0.3804, 0.0119,
//            0.9649, 0.9595, 0.1712, 0.0344, 0.7547, 0.2238, 0.2575, 0.4733, 0.5678, 0.3371};
//
//        double test_array_1[] = {
//            0.1622, 0.4505, 0.1067, 0.4314, 0.8530, 0.4173, 0.7803, 0.2348, 0.5470, 0.9294,
//            0.7943, 0.0838, 0.9619, 0.9106, 0.6221, 0.0497, 0.3897, 0.3532, 0.2963, 0.7757,
//            0.3112, 0.2290, 0.0046, 0.1818, 0.3510, 0.9027, 0.2417, 0.8212, 0.7447, 0.4868,
//            0.5285, 0.9133, 0.7749, 0.2638, 0.5132, 0.9448, 0.4039, 0.0154, 0.1890, 0.4359,
//            0.1656, 0.1524, 0.8173, 0.1455, 0.4018, 0.4909, 0.0965, 0.0430, 0.6868, 0.4468,
//            0.6020, 0.8258, 0.8687, 0.1361, 0.0760, 0.4893, 0.1320, 0.1690, 0.1835, 0.3063,
//            0.2630, 0.5383, 0.0844, 0.8693, 0.2399, 0.3377, 0.9421, 0.6491, 0.3685, 0.5085,
//            0.6541, 0.9961, 0.3998, 0.5797, 0.1233, 0.9001, 0.9561, 0.7317, 0.6256, 0.5108,
//            0.6892, 0.0782, 0.2599, 0.5499, 0.1839, 0.3692, 0.5752, 0.6477, 0.7802, 0.8176,
//            0.7482, 0.4427, 0.8001, 0.1450, 0.2400, 0.1112, 0.0598, 0.4509, 0.0811, 0.7948};
//
//        double test_array_2[] = {
//            0.6443, 0.2077, 0.3111, 0.5949, 0.0855, 0.9631, 0.0377, 0.1068, 0.0305, 0.1829,
//            0.3786, 0.3012, 0.9234, 0.2622, 0.2625, 0.5468, 0.8852, 0.6538, 0.7441, 0.2399,
//            0.8116, 0.4709, 0.4302, 0.6028, 0.8010, 0.5211, 0.9133, 0.4942, 0.5000, 0.8865,
//            0.5328, 0.2305, 0.1848, 0.7112, 0.0292, 0.2316, 0.7962, 0.7791, 0.4799, 0.0287,
//            0.3507, 0.8443, 0.9049, 0.2217, 0.9289, 0.4889, 0.0987, 0.7150, 0.9047, 0.4899,
//            0.9390, 0.1948, 0.9797, 0.1174, 0.7303, 0.6241, 0.2619, 0.9037, 0.6099, 0.1679,
//            0.8759, 0.2259, 0.4389, 0.2967, 0.4886, 0.6791, 0.3354, 0.8909, 0.6177, 0.9787,
//            0.5502, 0.1707, 0.1111, 0.3188, 0.5785, 0.3955, 0.6797, 0.3342, 0.8594, 0.7127,
//            0.6225, 0.2277, 0.2581, 0.4242, 0.2373, 0.3674, 0.1366, 0.6987, 0.8055, 0.5005,
//            0.5870, 0.4357, 0.4087, 0.5079, 0.4588, 0.9880, 0.7212, 0.1978, 0.5767, 0.4711};
//
//        Mat input = Mat::zeros(nRow, nCol, CV_64FC3);
//        for (int i = 0; i < nRow; ++i)
//            for (int j = 0; j < nCol; ++j) {
//                input.at<Vec3d>(i, j)[0] = test_array_0[i*nCol + j];
//                input.at<Vec3d>(i, j)[1] = test_array_1[i*nCol + j];
//                input.at<Vec3d>(i, j)[2] = test_array_2[i*nCol + j];
//            }
//        printf("Input mat:\n");
//        for (int channel = 0; channel < 3; ++channel) {
//            for (int i = 0; i < input.rows; ++i) {
//                for (int j = 0; j < input.cols; ++j)
//                    printf("%lf, ", input.at<Vec3d>(i, j)[channel]);
//                printf("\n");
//            }
//            printf("\n\n\n\n\n");
//        }
//
//        Mat output;
//        rgb2ntsc(input, output);
//        printf("Output mat:\n");
//        for (int channel = 0; channel < 3; ++channel) {
//            for (int i = 0; i < output.rows; ++i) {
//                for (int j = 0; j < output.cols; ++j)
//                    printf("%lf, ", output.at<Vec3d>(i, j)[channel]);
//                printf("\n");
//            }
//            printf("\n\n\n\n\n");
//        }
//
//        ntsc2rgb(output, input);
//        printf("NTSC mat:\n\n");
//        for (int channel = 0; channel < 3; ++channel) {
//            for (int i = 0; i < input.rows; ++i) {
//                for (int j = 0; j < input.cols; ++j)
//                    printf("%lf, ", input.at<Vec3d>(i, j)[channel]);
//                printf("\n");
//            }
//            printf("\n\n\n\n\n");
//        }
//    }

    
    void test_ideal_bandpassing() {
        printf("test_ideal_bandpassing()\n");
        int nTime = 100, nRow = 5, nCol = 2;
        double samplingRate = 20;
        double wl = 2;
        double wh = 7;
        double array_0_0[] = {4.4046, 3.1678, 5.8768, 0.0905, 1.4755, 3.6798, 7.4521, 8.6440, 9.8484, 4.8318, 0.7061, 9.6068, 0.6461, 6.7047, 9.3732, 4.6404, 7.7248, 6.3302, 4.4755, 8.6715, 2.2590, 5.3509, 8.4363, 0.5478, 4.8344, 3.5796, 7.2524, 0.4456, 2.7517, 9.8319, 9.9965, 7.6569, 8.1410, 1.8985, 2.6640, 8.6016, 9.1323, 5.1734, 3.0777, 6.3573, 9.3147, 8.7568, 2.9435, 9.8608, 8.1595, 7.1104, 3.1928, 9.8306, 1.3340, 5.0963, 8.4383, 1.6592, 2.8220, 1.1158, 2.7121, 9.0594, 7.1640, 5.3486, 2.1797, 5.8486, 2.1544, 9.6631, 0.9195, 5.3558, 7.8056, 7.9078, 1.8272, 5.3591, 3.2053, 1.4467, 4.4558, 9.0750, 5.8434, 1.3274, 0.6375, 4.1131, 6.4733, 2.5242, 9.1419, 2.5896, 1.4359, 2.8001, 2.9869, 9.9854, 7.2657, 0.9624, 0.3369, 2.9488, 6.5258, 1.9722, 0.0709, 0.3054, 9.3287, 8.5708, 4.2120, 9.3833, 5.7415, 5.0198, 0.9523, 5.9544, 4.9007, 3.5138, 5.0382, 9.5899, 9.3359, 1.0868, 9.9454, 1.1251, 7.8974, 1.4676, 2.6215, 3.4343, 3.2183, 6.5062, 7.5555, 3.7319, 2.8184, 8.5776, 2.7110, 3.3585, 4.2009, 7.4618, 1.9154, 5.4101, 6.3317, 6.4638, 4.6534, 4.4874, 5.6550, 6.6624, 6.1732, 8.6481, 4.8989, 4.9611, 4.8933, 8.9381, 2.8395, 9.9947, 3.3630, 7.0751, 0.0202, 2.6535, 2.6143, 5.0155, 8.5298, 2.1864, 8.5199, 5.1783, 4.7029, 2.1444, 0.2249, 2.9704, 1.2317, 8.1969, 7.1809, 0.2943, 4.1875, 4.9280, 4.4541, 7.6866, 9.9004, 0.5301, 5.6452, 3.0806, 4.9046, 0.2501, 5.4761, 0.6420, 3.5737, 7.0605, 2.9828, 6.2904, 5.5721, 6.8567, 0.2053, 7.3426, 6.8590, 1.6566, 0.4394, 7.1338, 1.7481, 9.7012, 7.3621, 0.5510, 1.6478, 5.0050, 7.8867, 9.4141, 5.5926, 3.6303, 7.2237, 1.1277, 9.9801, 3.2105, 3.6976, 5.3940, 3.8898, 9.4905, 1.2354, 7.6017, 8.4850, 3.4757, 3.6683, 5.1364, 9.9360, 3.7568, 3.2285, 1.6717, 4.2053, 2.2518, 8.0931, 0.0418, 7.9421, 5.3705, 4.8544, 8.8525, 7.3442, 1.0594, 5.4235, 0.6979, 0.7258, 8.3445, 2.7923, 4.0718, 4.6182, 9.1060, 6.1198, 9.4858, 6.6651, 0.9717, 3.5397, 1.2258, 0.2590, 3.0863, 2.7849, 9.5541, 7.9460, 2.2962, 3.5351, 7.2815, 6.3340, 0.7423, 0.0680, 6.9787, 6.1379, 5.6148, 9.9990, 1.8001, 1.7430, 2.1088, 1.2469, 9.5574, 7.1740, 0.9037, 9.8539, 5.5777, 7.5700, 6.3141, 2.2984, 6.5121, 6.2530, 9.2586, 0.4063, 2.1662, 9.7618, 5.6655, 0.9887, 8.3718, 6.6556, 3.3863, 9.1957, 2.5479, 3.5806, 5.9992, 9.5630, 6.1678, 3.7620, 1.1828, 8.4185, 5.7634, 1.6236, 0.8958, 3.1076, 6.6847, 5.8163, 3.1403, 4.3379, 9.4860, 5.0315, 1.4545, 4.4873, 0.7158, 2.6523, 7.0689, 1.9278, 2.5707, 7.0202, 8.8502, 5.7148, 3.7779, 7.4646, 0.1808, 0.9016, 0.0724, 8.3179, 0.1146, 6.8753, 9.6683, 2.8901, 8.2705, 0.9550, 6.8321, 8.3486, 0.0437, 0.4902, 3.2829, 1.4617, 2.2674, 3.4355, 4.1812, 6.3275, 4.2623, 4.2077, 2.4965, 7.2800, 4.7717, 6.0156, 3.3991, 7.5776, 4.5259, 4.6174, 1.5791, 8.3553, 3.8359, 4.5262, 7.2110, 1.5162, 0.2690, 8.7653, 7.0418, 2.5409, 0.7473, 1.8206, 3.6077, 5.7052, 8.2032, 2.7371, 3.8636, 1.3232, 5.4484, 9.9150, 5.8309, 6.1401, 2.8771, 0.2110, 3.6789, 7.1017, 2.1121, 2.6329, 8.5636, 1.8386, 9.6447, 5.9488, 6.4300, 3.5291, 1.6517, 4.1988, 7.2849, 7.3310, 2.5199, 3.0474, 3.9310, 6.5464, 3.5902, 2.3849, 6.6963, 0.9199, 9.2840, 9.9917, 8.2132, 4.6787, 8.2873, 7.7782, 2.3257, 4.5741, 5.5169, 0.5248, 6.5280, 2.8824, 7.5409, 3.0183, 9.9561, 7.8923, 6.6064, 3.1213, 0.3365, 5.6070, 9.0938, 3.4992, 6.9108, 7.5080, 5.5977, 7.9732, 9.1804, 9.0590, 9.1574, 5.4786, 4.4057, 9.1594, 1.6705, 7.7846, 3.9822, 2.0541, 7.3049, 2.2417, 5.6049, 4.5728, 9.9498, 0.9058, 6.8824, 2.9507, 3.3104, 9.1492, 7.2948, 6.6193, 1.5488, 4.2387, 6.4235, 2.4442, 9.6271, 3.7120, 5.7003, 2.8862, 7.7725, 9.4888, 5.3142, 1.9828, 7.7238, 7.1139, 4.0231, 5.8468, 7.9874, 8.3726, 2.6129, 8.7183, 0.0340, 7.0743, 4.2432, 9.5103, 6.1611, 5.8944, 4.2807, 9.9777, 9.9636, 9.8449, 2.6463, 2.6089, 3.7721, 3.0582, 5.6612, 5.7530, 9.8056, 5.8789, 5.0864, 3.2795, 0.4155, 0.7044, 4.2054, 0.2923, 8.9314, 9.7145, 2.8203, 8.7277, 4.6340, 9.8166, 3.5118, 9.5510, 9.0213, 9.1422, 9.2887, 9.2993, 1.5700, 6.0591, 4.2176, 5.7308, 3.6821, 9.1573, 5.8228, 7.5282, 0.1515, 0.6824, 6.5918, 5.2170, 0.5302, 3.2368, 0.0632, 3.3262, 3.9155, 9.9090, 7.9339};
        double array_1_0[] = {3.6428, 2.0234, 8.4460, 5.3399, 0.3193, 3.4587, 3.9949, 6.2870, 1.5550, 2.8978, 0.6152, 1.3066, 8.1362, 0.8956, 2.3065, 5.3340, 4.0869, 2.6055, 5.5254, 2.3453, 3.9324, 1.9046, 0.8472, 7.5976, 7.6214, 8.4536, 3.9016, 3.2758, 3.3338, 1.1372, 7.6745, 6.0448, 9.9834, 9.8878, 5.0774, 0.8381, 5.4939, 7.2606, 0.2463, 3.3949, 3.3551, 4.8107, 7.2096, 5.6044, 6.6276, 6.0871, 4.2984, 4.0323, 9.4411, 3.2779, 2.0901, 7.3151, 2.7173, 6.7043, 5.5518, 3.2381, 7.4124, 5.7199, 9.5935, 7.2141, 1.3031, 5.7450, 8.0041, 2.9922, 8.8972, 6.7892, 6.8254, 0.8465, 6.8276, 4.7501, 8.0515, 0.5288, 4.4027, 8.3808, 8.6043, 9.7208, 4.6515, 0.8793, 3.9998, 5.7390, 9.7331, 2.5050, 9.2460, 5.7958, 9.7910, 0.8945, 1.1096, 9.6649, 7.7275, 4.5579, 8.6844, 5.0001, 5.9556, 7.7874, 4.5108, 5.6616, 3.8844, 7.1404, 4.0761, 3.7685, 8.7609, 9.4542, 6.1317, 1.0129, 1.0429, 4.9957, 8.5568, 7.2224, 6.2417, 6.4372, 4.7421, 3.0360, 6.6662, 6.3251, 1.5202, 7.6647, 0.0140, 8.7125, 4.0887, 4.1076, 2.5913, 7.2609, 9.2438, 3.8113, 0.2720, 6.7592, 0.0789, 5.2883, 8.4002, 5.8603, 5.7239, 5.6955, 3.7845, 0.4315, 2.5603, 8.9418, 6.7101, 2.3298, 2.0870, 5.8859, 0.0465, 8.5788, 6.9354, 1.0643, 3.6824, 6.4530, 9.4462, 2.2095, 4.9575, 6.4040, 6.8036, 3.7441, 9.3602, 4.8484, 6.7980, 8.5327, 8.7995, 5.4070, 7.9131, 7.4101, 5.3127, 0.4211, 6.5161, 9.0512, 0.2849, 0.5900, 9.7374, 8.0155, 6.7185, 9.5040, 1.8786, 7.3911, 9.8025, 4.7416, 1.3503, 3.9041, 3.5553, 3.7166, 1.5425, 3.3367, 0.1211, 9.4420, 2.7908, 4.3940, 3.7018, 5.8193, 9.8019, 0.5439, 6.2073, 3.2239, 1.9890, 5.7477, 4.4758, 7.9303, 3.4872, 1.7110, 0.6461, 1.3368, 6.9171, 7.5555, 6.6556, 3.1257, 8.0914, 1.0396, 1.2218, 6.0962, 3.3589, 8.4283, 5.4781, 3.2372, 8.0639, 3.5747, 5.9341, 7.2724, 1.9012, 3.7662, 3.4646, 4.1459, 4.9258, 3.3779, 6.3028, 4.0574, 5.6637, 7.2190, 7.6289, 1.3293, 5.4731, 8.6959, 9.6741, 9.1072, 8.4737, 6.0811, 9.0241, 9.0429, 1.8308, 3.3308, 7.9292, 5.2038, 8.5560, 7.4402, 8.3908, 5.2654, 8.7091, 7.6375, 7.6265, 1.8687, 6.6920, 8.9040, 7.5273, 4.9017, 3.3604, 9.4009, 3.6923, 0.8106, 9.9122, 0.8460, 9.3574, 3.3002, 6.7304, 0.1707, 5.2614, 4.8334, 5.0679, 9.0246, 4.3606, 8.1744, 8.3770, 8.6695, 3.2825, 9.8569, 9.1709, 5.2775, 8.0384, 8.2736, 9.3651, 4.9601, 9.8892, 4.0135, 5.9502, 4.2807, 9.9879, 7.7313, 8.2742, 9.8151, 5.8207, 0.4884, 5.2585, 5.8545, 0.0643, 7.1978, 3.3137, 1.1683, 6.6199, 0.4443, 8.4776, 9.9769, 1.4408, 7.9687, 4.2327, 1.2062, 7.1060, 2.9988, 1.0382, 5.2105, 5.7375, 5.1607, 0.3066, 8.6046, 9.4509, 8.7749, 0.8747, 4.4188, 0.6517, 2.6715, 6.6525, 2.9167, 2.2072, 0.8821, 3.7977, 7.9709, 8.8050, 6.0481, 7.8523, 7.9960, 9.5219, 2.1117, 3.9775, 6.3150, 7.4458, 3.4473, 2.8706, 1.8541, 0.4763, 3.4187, 9.1768, 0.0987, 6.4965, 1.5409, 0.1959, 6.4322, 7.9858, 3.2530, 3.5493, 0.4621, 7.7577, 8.6869, 8.4207, 9.2776, 5.2870, 9.7898, 4.8025, 6.1699, 3.0364, 7.4512, 0.6289, 9.2452, 1.1403, 6.5316, 0.9529, 2.0767, 8.2367, 0.1200, 5.4458, 9.3782, 1.5688, 7.1451, 7.2584, 2.6718, 0.0799, 6.1324, 8.4117, 3.1774, 3.5828, 1.7354, 0.2646, 0.4488, 6.8245, 3.2696, 6.4669, 8.4322, 9.6692, 4.3373, 3.0655, 0.1369, 0.9041, 0.1805, 3.9951, 6.5863, 0.6350, 9.7517, 3.4344, 8.0380, 0.4796, 9.1230, 1.9860, 1.0430, 0.3044, 3.4591, 7.3816, 8.4702, 2.6040, 9.2196, 8.1575, 1.6347, 4.5573, 5.5394, 3.1998, 3.7269, 6.1438, 9.1977, 0.6064, 8.2092, 5.8977, 7.1056, 1.8479, 2.9148, 1.7587, 4.0537, 2.6196, 1.1887, 3.5604, 4.6762, 7.1788, 3.8387, 1.9102, 6.9324, 5.7607, 9.7882, 5.4898, 2.6079, 8.7848, 8.9792, 5.6886, 8.3580, 5.0304, 4.4741, 0.1481, 0.8629, 5.4590, 3.8708, 9.1373, 1.5671, 8.4543, 6.5327, 7.6214, 2.4287, 5.2171, 2.3946, 1.3120, 4.5647, 8.9450, 4.7693, 5.9794, 8.0536, 2.2347, 1.3135, 8.8185, 6.7071, 3.5319, 7.4860, 9.3169, 4.7820, 0.0063, 2.8404, 2.1173, 6.5963, 1.4218, 3.3461, 3.6558, 4.6951, 8.0255, 2.8738, 2.5866, 9.9092, 1.8266, 6.5112, 3.4429, 2.6498, 8.6909, 1.5777, 9.8646, 4.7088, 9.4497, 1.0383, 8.3704, 9.9242, 0.0506, 7.1935, 1.8847, 1.4722, 8.8350, 1.9413, 7.1761, 1.9072, 2.5795, 2.6178, 3.6051, 1.1729, 0.0969, 3.5728};
        double array_0_1[] = {4.7008, 3.4133, 1.2599, 3.3191, 6.7648, 0.0389, 1.4744, 9.6797, 4.3650, 2.6779, 6.4920, 6.9525, 9.4520, 7.7044, 1.9963, 6.1790, 1.5309, 5.2951, 2.7931, 8.7552, 0.7794, 0.1790, 6.4501, 2.4242, 9.1680, 1.2765, 2.7068, 9.2844, 4.6941, 0.1174, 3.8906, 3.3728, 9.8381, 0.7304, 5.8242, 4.4152, 4.9180, 4.9935, 9.9990, 4.0123, 5.3656, 7.5837, 2.0448, 5.2190, 0.1644, 1.9429, 9.4801, 7.7509, 2.5008, 3.4179, 5.8093, 3.3481, 1.4758, 6.8319, 7.4924, 1.6627, 6.7702, 8.4374, 6.4735, 3.2990, 9.2886, 9.7042, 5.2197, 4.1656, 3.1795, 6.5642, 3.7943, 1.9714, 5.9938, 4.3185, 0.8726, 1.6988, 9.7363, 4.3359, 8.0936, 5.4985, 8.6386, 4.4537, 0.1408, 5.3491, 4.4859, 3.4845, 2.5928, 2.4751, 6.5037, 1.7407, 1.5716, 1.4612, 8.8773, 7.1183, 2.9952, 3.1550, 6.5710, 2.0531, 3.3709, 3.3234, 5.1094, 9.2625, 8.1778, 6.5710, 2.2015, 0.5361, 9.7475, 4.6161, 2.5722, 8.5124, 5.9363, 4.4003, 8.3395, 6.2947, 6.7325, 9.3687, 2.8069, 8.3888, 4.1071, 9.7822, 3.5038, 3.7635, 4.7415, 5.2129, 7.6915, 0.8044, 0.9638, 8.4069, 5.9509, 2.1297, 7.4807, 7.0019, 7.6063, 6.8147, 6.6032, 1.5526, 4.8007, 2.2850, 0.5846, 0.2138, 1.9455, 8.1430, 8.2785, 9.6702, 5.2811, 6.6520, 3.4153, 4.9956, 2.3855, 1.2188, 1.0417, 5.7800, 9.0820, 4.6341, 8.0731, 1.5516, 6.9664, 4.0209, 6.7722, 4.7126, 1.0547, 9.4794, 7.1907, 6.7152, 7.7911, 8.9081, 7.5328, 8.9158, 5.8756, 6.1729, 9.6392, 3.2632, 9.5213, 3.1913, 2.0187, 5.3554, 1.4345, 9.3942, 7.4464, 2.9915, 6.5010, 8.6939, 6.1669, 9.3883, 1.8100, 4.3334, 9.9202, 6.4489, 2.2173, 7.4715, 3.8222, 9.7972, 3.1031, 4.7495, 7.5775, 9.9788, 2.3209, 2.6135, 1.1169, 8.8228, 9.1088, 8.0150, 2.5900, 9.4913, 1.3981, 7.0611, 4.8194, 3.9097, 3.9730, 2.2129, 9.5680, 0.7744, 4.7193, 8.0614, 5.4134, 4.4008, 9.7112, 0.3216, 1.1331, 9.9443, 4.5764, 0.3687, 9.5576, 8.9604, 3.8590, 9.4711, 5.3624, 5.0290, 8.5622, 5.9428, 0.0609, 9.0114, 7.6504, 5.0963, 1.1465, 9.5736, 2.6799, 9.2081, 3.5409, 9.7070, 7.3962, 0.4416, 9.6224, 9.4582, 6.3005, 8.0183, 0.1397, 8.5851, 2.2067, 3.0176, 5.3409, 1.9359, 1.1298, 8.3290, 6.4912, 7.0132, 7.0269, 3.9822, 4.3098, 0.1403, 3.2313, 7.7840, 5.3495, 8.0811, 8.2753, 3.4595, 0.0097, 3.6951, 1.0444, 7.2345, 1.9371, 6.9020, 1.8692, 1.1506, 5.1521, 7.0080, 9.6156, 1.2006, 8.1220, 2.5856, 4.8364, 3.3739, 9.2997, 8.3283, 1.0152, 6.1284, 8.2159, 2.7371, 5.5298, 1.9240, 2.5695, 8.4402, 4.6197, 9.9929, 4.4476, 0.1806, 7.7384, 0.1347, 4.3725, 2.2100, 4.4499, 7.7023, 8.1300, 5.3405, 6.5150, 8.3163, 4.4794, 6.6452, 1.4217, 9.2930, 8.4612, 0.1519, 4.4950, 3.4692, 7.7479, 3.9401, 7.3568, 5.4796, 0.4849, 0.2895, 3.2927, 2.5464, 2.0006, 1.9111, 6.1944, 4.3309, 3.6985, 4.4667, 6.0400, 1.0740, 8.4441, 5.9176, 3.3019, 9.7401, 0.0724, 5.4451, 2.2127, 9.5966, 7.7306, 2.0498, 1.5705, 9.3378, 4.2603, 0.7330, 6.8766, 5.8406, 1.8117, 5.2969, 6.8949, 3.9257, 1.6823, 7.5103, 6.4440, 1.0706, 0.3196, 9.4822, 6.5355, 4.9929, 1.7905, 3.9341, 6.9984, 5.4394, 6.7439, 3.7084, 1.7638, 2.3134, 4.2116, 6.1869, 0.5763, 3.8437, 8.9698, 8.8463, 0.8639, 9.5831, 9.3455, 5.0073, 4.0828, 5.5991, 1.5903, 5.4465, 8.7128, 6.5932, 8.8319, 4.0351, 4.5241, 0.6500, 6.5133, 5.7034, 3.6807, 0.0877, 6.3488, 5.2498, 7.1633, 0.0349, 3.4575, 9.2216, 8.9854, 4.9455, 7.2400, 2.5120, 9.6682, 7.5564, 1.8832, 1.0737, 3.9484, 2.7497, 9.8090, 0.5050, 1.2769, 8.2500, 9.8187, 5.8496, 8.3622, 9.7888, 3.2599, 9.5146, 4.9650, 5.9688, 4.5088, 7.2370, 4.4382, 3.4090, 0.6768, 8.1971, 1.0349, 6.7635, 7.5357, 9.9647, 5.0961, 2.5662, 8.1535, 1.5203, 0.0192, 4.6315, 2.2365, 6.3523, 3.4773, 9.4582, 9.8108, 8.4271, 1.7093, 1.9354, 6.0392, 1.5857, 2.0907, 1.5067, 8.7381, 6.9279, 5.0954, 4.8587, 2.4535, 7.6584, 4.2790, 7.4647, 2.9639, 3.1107, 9.0474, 9.5406, 5.4728, 3.6403, 0.7724, 0.7132, 2.0510, 7.5431, 4.3818, 9.9771, 0.6465, 1.3779, 6.1544, 1.2705, 6.1120, 5.2228, 0.9626, 5.3641, 3.0609, 5.1602, 2.9269, 3.4165, 6.6412, 4.0490, 1.1498, 2.2000, 1.5097, 4.2721, 5.5830, 7.7675, 7.9925, 9.5413, 7.0429, 2.3910, 3.3884, 9.1370, 7.2094, 4.6134, 6.1007, 0.3841, 9.7108, 0.8464, 5.3730, 3.1238, 9.9406, 3.5240, 0.2904, 4.6147};
        double array_1_1[] = {5.1251, 7.8316, 1.9283, 8.0351, 9.5577, 0.1285, 5.0242, 3.1233, 0.9282, 0.3247, 1.6103, 5.3674, 6.2557, 2.5907, 9.1100, 4.6114, 8.0671, 0.9262, 9.9743, 3.0081, 4.7589, 9.4802, 1.5902, 8.9044, 6.8063, 1.6895, 0.8183, 5.1084, 1.0639, 2.0825, 6.9461, 3.1764, 7.2286, 3.6242, 9.2263, 4.8155, 7.0663, 1.2733, 9.3866, 9.1756, 5.0881, 5.3522, 7.8786, 1.5529, 6.4496, 3.1938, 5.2148, 5.7212, 5.6027, 1.6436, 7.5247, 2.3082, 6.6749, 9.8467, 3.8734, 8.6231, 1.0138, 0.8754, 5.1036, 9.4616, 4.2056, 8.1308, 9.1785, 2.6557, 9.2498, 7.7143, 6.3563, 9.1998, 9.1646, 0.3970, 0.3609, 5.4843, 0.5835, 6.5412, 2.2447, 1.4560, 6.0784, 9.1346, 6.7410, 2.0881, 7.3483, 1.3598, 2.4026, 3.8877, 4.2578, 5.8896, 9.5319, 9.1585, 7.1839, 7.7372, 9.0493, 8.4590, 2.4934, 7.2277, 0.6377, 9.5707, 6.9678, 1.6913, 0.4515, 1.9122, 2.8555, 5.5797, 5.3914, 9.3403, 0.5833, 7.7451, 4.5592, 5.7764, 9.2537, 4.9834, 7.1681, 7.5505, 8.5869, 0.2926, 0.4205, 5.9992, 0.7027, 7.5788, 2.9370, 6.3939, 6.5421, 7.6636, 5.8891, 1.4887, 4.2374, 0.0619, 2.3504, 1.6838, 7.2055, 2.6797, 1.1153, 0.8304, 9.0522, 3.5176, 6.4957, 0.7910, 2.0296, 0.0582, 2.5387, 9.6107, 1.4818, 0.2478, 2.7462, 7.7939, 1.6086, 4.3318, 4.4926, 4.3005, 8.0500, 3.8917, 5.1664, 9.3675, 5.1703, 8.0594, 0.5940, 2.3619, 8.9762, 0.7348, 6.2960, 2.8883, 0.9269, 5.7951, 3.6181, 1.8379, 6.9496, 8.0734, 0.8049, 0.5820, 0.6463, 4.3592, 3.5325, 4.8723, 7.4786, 8.6229, 8.3415, 2.7168, 3.0496, 5.1065, 4.9618, 1.2079, 4.6820, 6.7702, 0.3376, 7.4847, 0.8198, 3.5129, 1.5021, 3.8328, 3.0136, 4.2164, 1.3962, 9.1621, 0.0674, 3.3690, 8.6665, 8.6310, 1.0271, 1.9378, 6.3623, 5.4793, 1.2584, 3.4696, 0.6145, 6.3821, 6.1856, 3.4579, 5.8561, 1.2390, 6.4122, 4.0124, 8.6224, 8.3925, 7.0470, 9.8490, 1.5402, 0.1733, 7.2734, 0.6508, 1.4347, 7.6469, 8.1160, 5.6424, 0.7345, 7.1532, 1.5587, 9.8740, 5.4507, 7.0011, 3.0830, 6.5956, 8.3355, 8.1493, 2.4299, 2.1372, 3.8392, 6.1062, 1.0657, 7.1296, 7.1243, 0.0581, 1.8875, 6.4967, 9.9673, 2.1587, 5.7904, 9.4398, 1.9441, 1.5324, 7.1561, 1.9327, 4.1184, 6.9654, 1.3550, 9.3932, 7.2947, 2.5416, 8.3067, 5.1129, 9.6884, 7.3022, 9.2366, 0.4344, 3.2984, 3.4868, 1.9567, 1.9088, 5.4822, 9.7850, 1.9709, 8.9474, 5.9825, 6.5223, 6.4694, 7.3955, 8.6172, 5.2390, 4.3756, 0.2827, 7.4521, 7.5378, 5.1749, 4.4885, 8.8932, 4.9695, 9.4819, 8.3042, 1.1139, 5.8126, 6.4564, 1.3249, 2.8407, 3.3537, 8.5951, 2.6190, 8.3554, 7.4668, 2.6157, 0.2949, 1.1758, 1.5562, 1.1094, 1.0982, 5.0743, 0.0399, 3.6837, 6.1537, 7.8008, 3.2037, 0.2674, 6.4361, 5.4580, 4.3053, 4.5740, 7.1213, 6.3906, 2.8532, 2.3853, 9.4443, 2.0505, 8.2331, 4.5850, 5.3279, 2.5594, 8.8427, 4.8968, 3.8062, 4.9700, 6.2572, 2.0041, 6.6217, 0.8253, 9.2366, 4.6077, 9.2987, 8.4422, 8.7938, 4.8371, 7.4020, 1.5339, 3.6182, 6.3557, 0.9994, 1.6515, 6.8895, 9.3346, 5.3393, 2.1873, 3.1574, 1.2467, 0.7366, 6.2588, 5.9978, 8.4580, 8.2766, 1.0258, 1.8885, 8.3237, 0.9672, 8.4578, 6.0574, 9.7249, 8.0719, 5.0858, 3.3450, 5.3716, 5.9584, 1.9893, 5.9913, 7.6821, 6.8375, 8.6924, 4.9150, 1.3530, 8.9247, 3.2196, 7.6717, 7.3659, 3.1535, 5.3920, 5.9322, 1.6540, 6.9504, 1.2128, 7.7913, 2.5636, 8.1738, 6.0085, 0.6510, 8.0106, 2.4289, 8.5355, 6.5773, 8.8200, 8.9327, 7.4375, 4.4016, 1.5342, 4.8526, 2.1299, 9.1023, 7.6847, 4.5439, 5.6818, 7.9866, 9.6319, 2.6831, 4.8762, 2.8136, 5.9354, 7.3598, 7.5408, 6.1704, 5.3466, 7.0851, 9.6465, 5.2575, 4.0030, 7.4858, 1.8187, 0.4500, 7.2521, 5.1832, 8.0325, 0.2865, 8.8416, 3.8431, 1.9954, 1.9607, 5.5495, 9.5697, 7.3085, 7.8041, 1.6609, 7.8879, 7.3539, 8.1476, 9.6443, 4.0250, 8.0904, 6.8187, 1.3864, 5.8249, 0.3193, 4.6993, 3.8834, 9.6250, 1.6222, 6.8692, 7.3633, 4.1929, 3.7447, 5.8344, 2.1212, 8.4399, 6.2547, 9.1185, 6.4710, 6.0686, 5.4050, 5.2395, 6.3671, 4.2239, 1.5750, 9.0967, 8.1720, 5.4097, 9.5856, 4.3725, 2.3843, 8.6327, 3.6578, 2.0537, 9.6048, 6.1994, 8.2450, 1.4123, 0.0861, 4.6065, 0.9317, 9.6893, 8.2808, 6.1813, 7.3728, 1.1262, 3.6386, 7.8309, 2.7868, 6.7943, 3.0800, 2.6931, 4.6427, 1.6805, 0.5616, 6.2005, 4.2231, 7.2513, 2.9630, 8.1612, 0.9405, 6.2229};
        double array_0_2[] = {7.8853, 6.6792, 5.6022, 9.7992, 2.1719, 0.0172, 2.4165, 3.7342, 3.4640, 0.6052, 2.1118, 0.9776, 6.8917, 0.4174, 9.6995, 0.4449, 7.7311, 8.4953, 1.8957, 9.7987, 4.4103, 8.4778, 2.9692, 2.1535, 5.7333, 0.4470, 7.5098, 4.3570, 0.1835, 8.3240, 6.0523, 4.9260, 3.5413, 5.5454, 0.2610, 0.1924, 8.8676, 0.2169, 5.6547, 5.3003, 1.8604, 8.7289, 2.7494, 4.4246, 0.5832, 3.8161, 3.9434, 2.2546, 0.3247, 7.7682, 4.0021, 1.5247, 2.5086, 4.0896, 5.8807, 2.4253, 2.0010, 9.9350, 7.5448, 0.5114, 2.3925, 4.8779, 2.5603, 3.9342, 3.7259, 4.2576, 1.2593, 8.6089, 0.2044, 4.5578, 8.8648, 4.7494, 8.1562, 0.4555, 0.2704, 3.7605, 7.5276, 1.5363, 3.2697, 8.7989, 6.6981, 3.8415, 5.0255, 3.7367, 5.7918, 2.8164, 0.1631, 5.2971, 0.4676, 7.4556, 9.2446, 1.5520, 5.9424, 9.3858, 9.2803, 0.9061, 8.4621, 9.4760, 9.2965, 8.9810, 9.4546, 3.6750, 6.8251, 9.9497, 6.4125, 8.4037, 6.0880, 0.1970, 2.7043, 5.2761, 3.7500, 5.0362, 1.8110, 7.1083, 2.6988, 1.6511, 9.7929, 8.0341, 1.9120, 7.5863, 5.3375, 0.2053, 7.7972, 5.9537, 0.8196, 5.0315, 9.0783, 5.8029, 5.0810, 3.4133, 0.0027, 9.6431, 7.6804, 5.1830, 6.9227, 8.3870, 7.4812, 0.6433, 0.6070, 4.3049, 9.8511, 8.4469, 8.0872, 7.1508, 2.8651, 1.1341, 0.9066, 2.1778, 0.3404, 7.6475, 8.3540, 3.0788, 9.7748, 6.0229, 4.1329, 4.8795, 3.2430, 9.1592, 5.5294, 0.2803, 7.5311, 2.6391, 5.5399, 4.0177, 6.4250, 9.0013, 0.6607, 5.1555, 2.5955, 1.8014, 3.1605, 3.5108, 8.7518, 9.9209, 4.0670, 0.9203, 1.4464, 4.9333, 6.3453, 2.8407, 0.7932, 5.2413, 4.0052, 0.8124, 1.2530, 9.2466, 2.9078, 6.3700, 4.2919, 1.2193, 4.1841, 8.2378, 5.9954, 7.3873, 8.5012, 0.3515, 9.0710, 2.1233, 3.6610, 6.4186, 6.6653, 4.0069, 7.5474, 3.8403, 3.7958, 0.3636, 1.0113, 8.7226, 5.8771, 6.2272, 7.7779, 8.7499, 4.0602, 6.9971, 9.1964, 2.3027, 9.9576, 1.8353, 9.4669, 1.1426, 3.4218, 9.7331, 6.2319, 0.2794, 8.8989, 4.1005, 5.6697, 8.0623, 9.9960, 3.4108, 0.7172, 9.4315, 3.5209, 8.7534, 5.7069, 4.5760, 6.2234, 7.1535, 8.3161, 8.4075, 0.5504, 0.4581, 6.2731, 9.1999, 4.9045, 8.2754, 6.7736, 9.8323, 5.6880, 8.8393, 5.7214, 8.4942, 7.6042, 7.0663, 3.3181, 5.4093, 8.6781, 7.5278, 3.3008, 1.3114, 1.3411, 3.2965, 6.4540, 5.1078, 9.3954, 1.4180, 3.9072, 4.0009, 4.4136, 2.3004, 4.9887, 5.8881, 5.0069, 7.2527, 3.2776, 1.7071, 2.8118, 4.3584, 8.9472, 0.8992, 4.0342, 1.5253, 2.5516, 2.1231, 2.0910, 2.3243, 6.1110, 1.5299, 2.1432, 4.0397, 2.4374, 3.0460, 1.5270, 9.4359, 4.5361, 6.7139, 2.2274, 1.3031, 1.3679, 7.8231, 2.3397, 1.5444, 4.1410, 4.6523, 1.8382, 8.4149, 9.6135, 6.3954, 5.3809, 8.5492, 4.0869, 7.5812, 9.9051, 3.2063, 2.2681, 5.7009, 5.4146, 7.5149, 5.9204, 2.8875, 2.2668, 0.5649, 9.1532, 6.7233, 6.5539, 2.5144, 5.9054, 2.4457, 0.7275, 0.6778, 5.9819, 5.0912, 3.0049, 6.8728, 5.1089, 8.6999, 6.1307, 6.1477, 2.9466, 7.6381, 4.3852, 9.1581, 9.6977, 6.9831, 2.4956, 5.1396, 7.0035, 4.8108, 4.0609, 5.9230, 2.1307, 8.4560, 4.0948, 7.2099, 0.4937, 8.9112, 5.4750, 4.6496, 9.1925, 2.5558, 2.7137, 2.6253, 0.7266, 6.0164, 0.2446, 7.3723, 9.7271, 9.4647, 6.4815, 9.6255, 2.2891, 7.8072, 3.4813, 5.0604, 4.6814, 1.1799, 3.2035, 8.5086, 4.8718, 0.7712, 4.9565, 5.8603, 8.4836, 4.8534, 5.3485, 3.7971, 4.3911, 1.8157, 7.0207, 8.1728, 5.5441, 1.3115, 4.5458, 5.9077, 6.1132, 9.5104, 3.2316, 3.8435, 1.6376, 7.7206, 5.6903, 9.3346, 3.9063, 4.8462, 5.4347, 8.3188, 9.6446, 3.2672, 2.6786, 7.4312, 2.7520, 5.4863, 3.7861, 5.2529, 9.7692, 5.1703, 3.2742, 6.0341, 4.3852, 4.4087, 1.5600, 1.4511, 4.0698, 4.7293, 7.7553, 3.0983, 2.0222, 5.5055, 8.0133, 9.1210, 7.5669, 9.5597, 8.5355, 4.4985, 9.0012, 0.6452, 6.8757, 1.4200, 5.6052, 5.1095, 2.5100, 2.5372, 0.6977, 9.9947, 2.8459, 5.6594, 4.3082, 0.1441, 6.0490, 4.8355, 9.0177, 0.1558, 1.9197, 7.4430, 2.8247, 2.1743, 2.1563, 9.8294, 6.2308, 1.7739, 6.7959, 7.5319, 3.7605, 7.5933, 9.3684, 5.0199, 8.0823, 7.4874, 7.4041, 6.4053, 8.1243, 2.5869, 6.3931, 5.6371, 4.2686, 1.8874, 2.8282, 3.3759, 0.2015, 7.7377, 1.2140, 1.6700, 3.7298, 9.2618, 5.2871, 9.2928, 7.6021, 5.1693, 5.8229, 1.9082, 5.9902, 2.0021, 6.0802, 9.1668, 6.4415, 5.8656, 0.9202, 0.3501, 1.9959, 2.6066};
        double array_1_2[] = {6.8961, 7.5806, 7.8185, 7.6647, 5.8353, 2.1871, 2.5904, 6.8471, 0.4669, 5.6269, 0.5966, 7.5292, 7.9083, 3.8881, 1.6749, 0.6055, 1.4382, 8.3980, 8.6740, 2.3331, 8.9553, 4.6650, 1.6328, 8.6434, 2.8643, 5.2935, 7.8452, 3.5432, 1.6972, 3.3145, 1.0610, 8.6349, 0.0362, 0.8544, 1.3614, 8.9173, 0.3062, 0.3806, 2.0878, 8.7422, 6.4112, 4.0141, 7.9384, 1.1762, 2.0777, 1.1076, 2.1748, 3.7893, 3.5628, 6.0318, 9.4890, 0.1932, 6.4387, 3.3597, 0.7823, 1.3243, 5.1995, 4.1445, 1.4164, 7.2542, 6.0989, 2.4398, 7.1015, 4.3917, 0.2506, 1.1681, 2.1812, 6.9609, 0.5796, 6.5863, 8.3980, 6.1760, 3.2844, 9.0877, 0.3063, 2.8758, 1.1307, 4.6812, 3.2426, 3.5563, 1.1425, 8.9663, 2.0691, 5.8435, 0.1688, 7.6730, 6.3848, 0.5179, 5.2807, 1.9345, 4.8898, 0.2991, 8.7505, 3.8466, 1.7157, 0.7299, 7.2652, 9.9990, 3.4043, 0.9386, 6.3913, 6.0401, 7.0138, 8.8526, 4.6028, 6.9886, 0.5442, 4.1564, 6.1851, 6.6575, 4.8185, 8.2178, 4.2581, 6.6000, 5.4561, 7.5138, 5.8272, 2.8451, 0.9958, 7.5900, 8.6889, 9.9573, 2.0531, 8.6367, 8.7766, 9.0196, 9.9844, 2.3131, 9.9975, 3.9519, 9.7603, 9.1819, 9.9568, 2.4171, 3.5380, 8.2948, 8.3807, 2.4006, 3.4925, 7.4302, 8.7897, 6.7312, 1.1426, 4.3344, 4.0792, 2.5169, 1.1734, 8.3117, 1.6557, 4.9732, 2.5324, 4.6116, 6.5957, 8.9918, 5.9885, 0.8056, 7.7672, 4.2275, 5.4632, 1.9443, 4.6051, 0.2402, 4.8550, 3.7112, 9.0963, 1.3948, 9.7615, 6.4611, 0.5279, 1.3423, 2.4229, 8.5906, 4.2796, 7.0184, 9.8137, 3.6821, 5.7623, 1.4403, 6.0248, 0.9124, 7.6001, 8.7204, 8.7933, 8.6507, 2.6180, 5.5147, 8.8307, 6.5923, 5.0765, 9.1607, 7.4187, 0.1547, 4.0661, 8.1420, 1.5904, 9.6252, 3.2329, 8.9817, 1.0629, 2.2242, 5.8774, 4.8075, 8.5213, 9.3840, 1.9467, 5.8874, 3.8855, 3.6898, 1.5000, 6.5712, 4.9302, 7.7119, 9.7195, 7.1377, 5.2548, 5.4074, 3.7686, 7.8741, 5.8871, 0.5550, 9.9132, 3.1031, 5.9840, 3.0441, 1.7198, 3.0465, 7.7521, 3.9970, 3.9624, 8.9500, 1.5232, 5.1986, 4.8152, 3.6209, 2.9543, 5.4264, 5.0783, 9.4528, 4.9911, 3.3469, 1.5975, 5.5182, 4.2987, 3.2646, 4.2788, 0.9600, 2.2961, 5.9920, 5.3707, 8.0869, 6.2957, 9.4948, 1.9891, 3.1892, 5.3267, 8.7485, 8.6408, 4.1076, 6.5125, 0.0958, 1.2106, 6.8301, 4.3552, 1.5466, 9.9886, 0.2462, 6.5781, 5.4245, 0.4721, 3.6736, 0.0469, 2.1609, 9.1908, 9.4724, 3.2636, 5.7470, 6.7818, 9.1259, 5.0505, 6.1958, 3.8325, 2.7124, 9.2424, 4.3231, 8.8928, 4.5289, 6.6426, 1.4193, 5.5665, 4.8411, 1.0607, 9.6391, 6.0397, 9.6840, 2.1328, 5.8479, 1.2174, 1.5914, 8.2360, 3.5815, 8.2135, 3.3968, 8.0779, 0.4478, 0.3922, 2.3912, 5.6765, 9.0645, 7.3746, 7.5012, 1.6659, 6.0348, 2.7053, 8.6436, 5.4398, 6.9110, 5.3151, 3.9227, 6.5448, 6.1467, 2.8440, 9.6310, 3.2909, 4.8161, 8.2511, 0.7449, 1.6173, 5.1305, 9.2167, 8.6488, 4.4552, 9.1635, 0.4271, 1.9819, 2.7681, 9.7177, 0.3159, 4.1246, 4.3389, 3.0096, 4.6341, 0.1044, 3.4310, 9.0678, 8.3817, 7.0876, 1.7288, 5.7253, 7.3958, 5.4217, 7.8380, 6.2385, 8.5950, 2.3677, 6.3686, 8.4137, 2.4743, 6.7239, 5.0959, 1.7308, 4.0151, 3.4824, 3.8318, 6.2107, 7.1673, 9.1145, 3.0868, 4.1271, 9.4571, 9.1871, 2.5513, 6.6816, 2.5958, 3.4994, 0.0521, 2.4803, 1.0733, 0.7465, 7.5786, 1.6608, 7.5839, 5.8041, 4.0069, 4.6635, 7.5165, 4.8771, 9.9255, 9.0653, 6.3015, 3.4720, 8.8095, 3.4190, 9.6849, 0.7953, 3.7331, 0.7740, 0.7319, 6.9282, 3.8010, 6.6908, 2.9578, 9.3045, 3.2831, 1.0769, 3.3180, 7.1425, 9.0406, 0.9629, 6.5453, 0.8023, 1.0569, 4.7566, 1.6502, 7.4926, 3.3288, 0.3519, 0.8484, 1.4172, 5.5398, 1.5601, 4.7645, 6.1279, 5.2607, 1.9097, 2.5581, 8.8757, 0.9089, 6.7501, 6.7783, 0.3556, 8.1226, 4.0527, 5.0536, 3.7578, 4.3636, 7.9778, 4.7264, 2.0620, 8.2289, 4.0542, 8.0985, 7.5930, 3.6616, 6.8393, 6.2683, 4.7530, 2.0873, 5.9928, 7.1545, 1.6617, 8.7489, 1.6426, 9.2220, 5.0065, 2.3974, 7.2622, 3.1172, 9.0544, 8.9830, 0.5214, 4.8156, 1.8776, 1.7720, 3.5926, 7.3231, 7.1686, 2.7828, 6.4427, 1.1104, 5.5657, 4.5780, 4.1915, 6.7545, 3.4265, 6.7064, 6.9793, 5.4463, 9.5819, 8.4957, 7.8616, 1.2059, 6.9970, 2.6281, 3.8343, 6.1367, 9.5629, 4.3634, 4.5099, 9.2563, 3.9249, 9.4995, 0.6611, 8.6164, 2.8028, 2.6616, 9.3181, 5.6914, 6.9190, 7.1989, 9.0187};
        
        //        int input_size[] = {nTime, nRow, nCol};
        vector<Mat> input;
        Mat tmp = Mat::zeros(nRow, nCol, CV_64FC3);
        for (int i = 0; i < nTime; ++i)
            input.push_back(tmp.clone());
        for (int k = 0; k < nTime; ++k) {
            
            for (int i = 0; i < nRow; ++i) {
                input[k].at<Vec3d>(i, 0)[0] = array_0_0[k*nRow + i];
                input[k].at<Vec3d>(i, 1)[0] = array_1_0[k*nRow + i];
                input[k].at<Vec3d>(i, 0)[1] = array_0_1[k*nRow + i];
                input[k].at<Vec3d>(i, 1)[1] = array_1_1[k*nRow + i];
                input[k].at<Vec3d>(i, 0)[2] = array_0_2[k*nRow + i];
                input[k].at<Vec3d>(i, 1)[2] = array_1_2[k*nRow + i];
            }
        }
        
        vector<Mat> output;
        ideal_bandpassing(input, output, wl, wh, samplingRate);
        printf("Output vector<Mat>: size() = %i, nRow = %i, nCol = %i\n", (int)input.size(), nRow, nCol);
        for (int channel = 0; channel < 3; ++channel) {
            for (int col = 0; col < nCol; ++col) {
                for (int time = 0; time < nTime; ++time) {
                    for (int row = 0; row < nRow; ++row)
                        printf("%lf, ", output[time].at<Vec3d>(row, col)[channel]);
                    printf("\n");
                }
                printf("\n\n\n");
            }
        }
//        for (int k = 0; k < nTime; ++k) {
//            for (int i = 0; i < nRow; ++i) {
//                for (int j = 0; j < nCol; ++j) {
//                    printf("(");
//                    for (int channel = 0; channel < 3; ++channel)
//                        printf("%lf, ", output[k].at<Vec3d>(i, j)[channel]);
//                    printf("), ");
//                }
//                printf("\n");
//            }
//            printf("\n\n\n");
//        }
    }
    
    
    void test_function(const vector<int> &src, vector<int> &dst) {
        if (&src == &dst)
            printf("&src == &dst\n");
        dst.clear();
        for (int i = 0; i < (int)src.size(); ++i)
            dst.push_back(src[i]*src[i]);
    }
    
    
    void test_openCV()
    {
        printf("test_openCV()\n");
        int n = 100;
//        int m = 200;
//        int array_size[] = {100, 200, 10};
//        Mat a = Mat(3, array_size, CV_64FC3, cv::Scalar(0));
//        Mat b = Mat(3, array_size, CV_32FC3, cv::Scalar(0));
//        Mat a = Mat::ones(n, m, CV_64FC3);
//        Mat b = Mat::ones(n, m, CV_32FC3);
//        a.convertTo(b, CV_32FC3);
//        b.convertTo(b, CV_64FC3);
        
        vector<int> a;
        vector<int> b;
        for (int i = 0; i < n; ++i)
            a.push_back(i);
        test_function(a, a);
        for (int i = 0; i < (int)a.size(); ++i)
            printf("%d, ", a[i]);
//        test_function(a, b);
//        for (int i = 0; i < (int)b.size(); ++i)
//            printf("%d, ", b[i]);
        printf("\n");
    }
}